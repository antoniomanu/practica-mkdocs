{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Principal"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Hola Mundo","title":"Acerca de"},{"location":"practica-jekyll/","text":"Creacion de blogs con Jekyll Introducci\u00f3n Jekyll es un generador de sitios web est\u00e1ticos que nos permite crear de forma sencilla blogs, sitios webs personales o webs para proyectos. Los sitios webs generados con Jekyll no usan una base de datos, el contenido del sitio web est\u00e1 escrito en archivos de texto plano en formato Markdown. Primeros pasos Para poder hacer esta practica podemos usar cualquier maquina de ubuntu, simplemente tendremos que abrir el puerto 22 para conectar por SSH y el puerto 4000. Tambien necesitaremos crear un repositorio en nuestro github que llamaremos \"usuario de github\".github.io Una vez creado el repositorio lo clonamos en la maquina que hemos creado Creacion del sitio Cuando se haya clonado entramos y lanzamos el contenedor de Jekyll con el siguiente comando, que nos crear\u00e1 la infraestructura de nuestro blog. sudo docker run -it --rm -v \"$PWD:/srv/jekyll\" jekyll/jekyll jekyll new blog Este comando creara un directorio llamado blog, pero nos es mas comodo tenerlo todo en la raiz del repositorio clonado de github asi que vamos a sacar todo el contenido de este y eliminar el directorio. sudo mv blog/* ./ sudo rm -rf blog Para terminar vamos a subir todos estas cosas que hemos hecho desde consola al repositorio con git add --all, git commit, y git pull. git add --all git commit -m \"Comentario para el commit\" git push Acceso al sitio Para poder acceder a nuestro sitio ahora simplemente tendremos que usar el navegador y poner \"https:// usuario.github.io\" Deberia de aparecer algo como esto: En el archivo creado por defecto te explica como se deben de crear nuevos posts en Jekyll.","title":"Practica Jekyll"},{"location":"practica-jekyll/#creacion-de-blogs-con-jekyll","text":"","title":"Creacion de blogs con Jekyll"},{"location":"practica-jekyll/#introduccion","text":"Jekyll es un generador de sitios web est\u00e1ticos que nos permite crear de forma sencilla blogs, sitios webs personales o webs para proyectos. Los sitios webs generados con Jekyll no usan una base de datos, el contenido del sitio web est\u00e1 escrito en archivos de texto plano en formato Markdown.","title":"Introducci\u00f3n"},{"location":"practica-jekyll/#primeros-pasos","text":"Para poder hacer esta practica podemos usar cualquier maquina de ubuntu, simplemente tendremos que abrir el puerto 22 para conectar por SSH y el puerto 4000. Tambien necesitaremos crear un repositorio en nuestro github que llamaremos \"usuario de github\".github.io Una vez creado el repositorio lo clonamos en la maquina que hemos creado","title":"Primeros pasos"},{"location":"practica-jekyll/#creacion-del-sitio","text":"Cuando se haya clonado entramos y lanzamos el contenedor de Jekyll con el siguiente comando, que nos crear\u00e1 la infraestructura de nuestro blog. sudo docker run -it --rm -v \"$PWD:/srv/jekyll\" jekyll/jekyll jekyll new blog Este comando creara un directorio llamado blog, pero nos es mas comodo tenerlo todo en la raiz del repositorio clonado de github asi que vamos a sacar todo el contenido de este y eliminar el directorio. sudo mv blog/* ./ sudo rm -rf blog Para terminar vamos a subir todos estas cosas que hemos hecho desde consola al repositorio con git add --all, git commit, y git pull. git add --all git commit -m \"Comentario para el commit\" git push","title":"Creacion del sitio"},{"location":"practica-jekyll/#acceso-al-sitio","text":"Para poder acceder a nuestro sitio ahora simplemente tendremos que usar el navegador y poner \"https:// usuario.github.io\" Deberia de aparecer algo como esto: En el archivo creado por defecto te explica como se deben de crear nuevos posts en Jekyll.","title":"Acceso al sitio"},{"location":"practica-mkdocs/","text":"Creaci\u00f3n de un sitio web est\u00e1tico con MkDocs Introduccion MkDocs es un generador de sitios web est\u00e1ticos que nos permite crear de forma sencilla un sitio web para documentar un proyecto. El contenido del sitio web est\u00e1 escrito en texto plano en formato Markdown y se configura con un \u00fanico archivo de configuraci\u00f3n en formato YAML. Primeros pasos Para poder hacer esta practica podemos usar cualquier maquina de ubuntu, simplemente tendremos que abrir el puerto 22 para conectar por SSH y el puerto 8000. Una vez dentro de la consola instalaremos docker y docker-compose, para asi poder descargar el contenedor de MkDocs desde docker, en este caso descargaremos uno con el theme Material. docker pull squidfunk/mkdocs-material Creacion del Proyecto Primero crearemos un directorio con el nombre que queramos, en este caso se llamara proyecto ; y nos movemos a este, desde ese directorio usaremos el comando new para crear los archivos del directorio docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material new . Este comando crear\u00e1 el archivo de configuraci\u00f3n mkdocs.yml y el archivo markdown index.md dentro del directorio docs, dentro de este directorio es donde publicaremos nuestros posts en markdown. Archivo de configuracion Dentro del directorio del proyecto esta el archivo mkdocs.yml en donde indicamos brevemente la configuracion de la pagina y donde asignamos nuestros posts. Debemos de configurarlo de la siguiente forma: site_name: IAW nav: - Principal: index.md - Acerca de: about.md theme: material Done site_name es el nombre de nuestra pagina, theme es el theme que usara nuestra pagina, y nav crea una peque\u00f1a sidebar en la pagina con titulos que enlaza a los archivos en markdown que tenemos el directorio docs . Lanzamiento del sitio Para poner en marcha el sitio vamos a usar el comando serve desde el directorio proyectos , el cual nos permitira conectar a nuestra pagina de html con \"nuestra ip\":8000 docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material El sitio deberia de verse asi: Github Pages Despues de comprobar que funciona vamos a lanzarlo en nuestro repositorio de github de la siguiente forma: Hacer que nuestro directorio proyecto sea un repositorio local. git init Enlazar nuestro repositorio local con el repositorio que corresponde a MkDocs en Github. git remote add origin url_del_directorio Lanzar el contenedor que nos subir\u00e1 los archivos a Github. El cual nos pedir\u00e1 los credenciales de usuario. docker run --rm -it -v ~/.ssh:/root/.ssh -v \"$PWD\":/docs squidfunk/mkdocs-material gh-deploy Despues de esto deberiamos tener un branch nuevo en el repositorio que hemos creado donde se encuentren los archivos de MkDocs.","title":"Practica MkDocs"},{"location":"practica-mkdocs/#creacion-de-un-sitio-web-estatico-con-mkdocs","text":"","title":"Creaci\u00f3n de un sitio web est\u00e1tico con MkDocs"},{"location":"practica-mkdocs/#introduccion","text":"MkDocs es un generador de sitios web est\u00e1ticos que nos permite crear de forma sencilla un sitio web para documentar un proyecto. El contenido del sitio web est\u00e1 escrito en texto plano en formato Markdown y se configura con un \u00fanico archivo de configuraci\u00f3n en formato YAML.","title":"Introduccion"},{"location":"practica-mkdocs/#primeros-pasos","text":"Para poder hacer esta practica podemos usar cualquier maquina de ubuntu, simplemente tendremos que abrir el puerto 22 para conectar por SSH y el puerto 8000. Una vez dentro de la consola instalaremos docker y docker-compose, para asi poder descargar el contenedor de MkDocs desde docker, en este caso descargaremos uno con el theme Material. docker pull squidfunk/mkdocs-material","title":"Primeros pasos"},{"location":"practica-mkdocs/#creacion-del-proyecto","text":"Primero crearemos un directorio con el nombre que queramos, en este caso se llamara proyecto ; y nos movemos a este, desde ese directorio usaremos el comando new para crear los archivos del directorio docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material new . Este comando crear\u00e1 el archivo de configuraci\u00f3n mkdocs.yml y el archivo markdown index.md dentro del directorio docs, dentro de este directorio es donde publicaremos nuestros posts en markdown.","title":"Creacion del Proyecto"},{"location":"practica-mkdocs/#archivo-de-configuracion","text":"Dentro del directorio del proyecto esta el archivo mkdocs.yml en donde indicamos brevemente la configuracion de la pagina y donde asignamos nuestros posts. Debemos de configurarlo de la siguiente forma: site_name: IAW nav: - Principal: index.md - Acerca de: about.md theme: material Done site_name es el nombre de nuestra pagina, theme es el theme que usara nuestra pagina, y nav crea una peque\u00f1a sidebar en la pagina con titulos que enlaza a los archivos en markdown que tenemos el directorio docs .","title":"Archivo de configuracion"},{"location":"practica-mkdocs/#lanzamiento-del-sitio","text":"Para poner en marcha el sitio vamos a usar el comando serve desde el directorio proyectos , el cual nos permitira conectar a nuestra pagina de html con \"nuestra ip\":8000 docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material El sitio deberia de verse asi:","title":"Lanzamiento del sitio"},{"location":"practica-mkdocs/#github-pages","text":"Despues de comprobar que funciona vamos a lanzarlo en nuestro repositorio de github de la siguiente forma: Hacer que nuestro directorio proyecto sea un repositorio local. git init Enlazar nuestro repositorio local con el repositorio que corresponde a MkDocs en Github. git remote add origin url_del_directorio Lanzar el contenedor que nos subir\u00e1 los archivos a Github. El cual nos pedir\u00e1 los credenciales de usuario. docker run --rm -it -v ~/.ssh:/root/.ssh -v \"$PWD\":/docs squidfunk/mkdocs-material gh-deploy Despues de esto deberiamos tener un branch nuevo en el repositorio que hemos creado donde se encuentren los archivos de MkDocs.","title":"Github Pages"}]}